#
# TYPO3.Neos:Page is the default object used for rendering in most sites,
# so TYPO3.Neos.Seo extends this default object
#
prototype(TYPO3.Neos:Page) {
	htmlTag {
		attributes {
			lang = ${String.replace(documentNode.context.dimensions.language[0], '_', '-')}
			lang.@if.languageDimensionExists = ${Configuration.setting('TYPO3.TYPO3CR.contentDimensions.language') != null}
			lang.@if.onlyRenderWhenInLiveWorkspace = ${node.context.workspace.name == 'live'}
		}
	}
	head {
		titleTag {
			default = TYPO3.TypoScript:Collection {
				// Retrieve all parent document nodes excluding the homepage
				collection = ${q(documentNode).add(q(documentNode).parents()).slice(0, -1).get()}
				itemName = 'node'
				iterationName = 'nodeIterator'
				// Implode node titles with a dash
				itemRenderer = ${q(node).property('title') + (nodeIterator.isLast ? '' : ' - ')}
				// Always add general site name as suffix
				@process.siteName = ${(value ? String.stripTags(value) + ' - ' : '') + site.context.currentSite.name}
			}

			content = ${q(node).property('titleOverride') ? q(node).property('titleOverride') : this.default}
		}

		metaDescriptionTag = TYPO3.TypoScript:Tag {
			tagName = 'meta'
			attributes {
				name = 'description'
				content = ${q(node).property('metaDescription')}
			}
			@if.isNotBlank = ${!String.isBlank(q(node).property('metaDescription'))}
		}

		metaKeywordsTag = TYPO3.TypoScript:Tag {
			tagName = 'meta'
			attributes {
				name = 'keywords'
				content = ${q(node).property('metaKeywords')}
			}
			@if.isNotBlank = ${!String.isBlank(q(node).property('metaKeywords'))}
		}

		metaRobotsTag = TYPO3.TypoScript:Tag {
			tagName = 'meta'
			attributes {
				name = 'robots'
				content = ${(q(node).property('metaRobotsNoindex') ? 'noindex' : 'index') + ',' + (q(node).property('metaRobotsNofollow') ? 'nofollow' : 'follow')}
			}
		}

		canonicalLink = TYPO3.TypoScript:Tag {
			tagName = 'link'
			attributes {
				rel = 'canonical'
				href = TYPO3.Neos:NodeUri {
					node = ${documentNode}
					absolute = TRUE
				}
				href.@process.canonical = ${q(node).property('canonicalLink') ? q(node).property('canonicalLink') : value}
			}
		}

		alternateLanguageLinks = TYPO3.Neos:DimensionMenu {
			@if.languageDimensionExists = ${Configuration.setting('TYPO3.TYPO3CR.contentDimensions.language') != null}
			@if.onlyRenderWhenInLiveWorkspace = ${node.context.workspace.name == 'live'}

			localeToLanguage = ${String.replace(item.preset.values[0], '_', '-')}

			dimension = 'language'
			templatePath = 'resource://TYPO3.Neos.Seo/Private/Templates/TypoScriptObjects/AlternateLanguageLinks.html'
		}

		twitterCard = TYPO3.TypoScript:Array {
			@if.isEnabledBlank = ${!String.isBlank(q(node).property('twitterCardType'))}
			@if.isEnabled = ${q(node).property('twitterCardType') != null}

			cardTypeTag = TYPO3.TypoScript:Tag {
				tagName = 'meta'
				attributes {
					name = 'twitter:card'
					content = ${q(node).property('twitterCardType')}
				}
			}

			cardSiteTag = TYPO3.TypoScript:Tag {
				tagName = 'meta'
				attributes {
					name = 'twitter:site'
					content = ${Configuration.setting('TYPO3.Neos.Seo.twitterCard.siteHandle')}
				}
				@if.isSet = ${Configuration.setting('TYPO3.Neos.Seo.twitterCard.siteHandle') != null}
			}

			cardCreatorTag = TYPO3.TypoScript:Tag {
				tagName = 'meta'
				attributes {
					name = 'twitter:creator'
					content = ${q(node).property('twitterCardCreator')}
				}
				@if.isNotBlank = ${!String.isBlank(q(node).property('twitterCardCreator'))}
			}

			cardTitleTag = TYPO3.TypoScript:Tag {
				tagName = 'meta'
				attributes {
					name = 'twitter:title'
					content = ${q(node).property('twitterCardTitle')}
				}
				@if.isNotBlank = ${!String.isBlank(q(node).property('twitterCardTitle'))}
			}

			cardDescriptionTag = TYPO3.TypoScript:Tag {
				tagName = 'meta'
				attributes {
					name = 'twitter:description'
					content = ${q(node).property('twitterCardDescription') ? q(node).property('twitterCardDescription') : q(node).property('metaDescription')}
				}
				@if.isNotBlank = ${!String.isBlank((q(node).property('twitterCardDescription') ? q(node).property('twitterCardDescription') : q(node).property('metaDescription')))}
			}

			cardImageTag = TYPO3.TypoScript:Tag {
				tagName = 'meta'
				attributes {
					name = 'twitter:image:src'
					content = TYPO3.Neos:ImageUri {
						asset = ${q(node).property('twitterCardImage')}
						maximumWidth = 2000
						maximumHeight = 2000
					}
				}
				@if.isImageSet = ${q(node).property('twitterCardImage') != null}
			}

			cardUrlTag = TYPO3.TypoScript:Tag {
				tagName = 'meta'
				attributes {
					name = 'twitter:url'
					content = TYPO3.Neos:NodeUri {
						node = ${node}
						absolute = TRUE
					}
				}
			}
		}

		openGraphMetaTags = TYPO3.TypoScript:Array {
			@context.openGraphType = ${q(node).property('openGraphType')}
			@if.isEnabled = ${!String.isBlank(openGraphType)}

			openGraphTypeTag = TYPO3.TypoScript:Tag {
				tagName = 'meta'
				attributes {
					property = 'og:type'
					content = ${openGraphType}
				}
			}

			openGraphTitleTag = TYPO3.TypoScript:Tag {
				tagName = 'meta'
				@context.openGraphTitle = ${q(node).property('openGraphTitle')}
				attributes {
					property = 'og:title'
					content = ${openGraphTitle}
				}
				@if.isNotBlank = ${!String.isBlank(openGraphTitle)}
			}

			openGraphDescriptionTag = TYPO3.TypoScript:Tag {
				tagName = 'meta'
				@context.openGraphDescription = ${q(node).property('openGraphDescription') ? q(node).property('openGraphDescription') : q(node).property('metaDescription')}
				attributes {
					property = 'og:description'
					content = ${openGraphDescription}
				}
				@if.isNotBlank = ${!String.isBlank(openGraphDescription)}
			}

			openGraphImageTag = TYPO3.TypoScript:Tag {
				tagName = 'meta'
				@context.openGraphImage = ${q(node).property('openGraphImage')}
				attributes {
					property = 'og:image'
					content = TYPO3.Neos:ImageUri {
						asset = ${openGraphImage}
						maximumWidth = 2000
						maximumHeight = 2000
					}
				}
				@if.isImageSet = ${openGraphImage != null && openGraphImage != ''}
			}

			openGraphUrlTag = TYPO3.TypoScript:Tag {
				tagName = 'meta'
				attributes {
					property = 'og:url'
					content = TYPO3.Neos:NodeUri {
						node = ${node}
						absolute = TRUE
					}
				}
			}
		}
	}
}

prototype(TYPO3.Neos.Seo:XmlSitemap) < prototype(TYPO3.TypoScript:Http.Message) {
	doctype = '<?xml version="1.0" encoding="UTF-8"?>'
	httpResponseHead.headers.Content-Type = 'text/xml'

	body = Menu {
		root = ${site}
		entryLevel = 0
		maximumLevels = 999
		renderHiddenInIndex = TRUE
		templatePath = 'resource://TYPO3.Neos.Seo/Private/Templates/Page/XmlSiteMap.xml'
		startingPoint = ${site}

		@cache.entryTags.1 = ${'DescendantOf_' + this.startingPoint.identifier}
	}
}

root.xmlSitemap {
	condition = ${request.format == 'xml.sitemap'}
	type = 'TYPO3.Neos.Seo:XmlSitemap'
}

prototype(TYPO3.Neos.Seo:RobotsTxt) < prototype(TYPO3.TypoScript:Http.Message) {
	doctype >
	httpResponseHead.headers.Content-Type = 'text/plain'

	body = TYPO3.Neos.NodeTypes:Text {
		templatePath = 'resource://TYPO3.Neos.Seo/Private/Templates/Page/Robots.txt'
		content = ${q(site).property('robotsTxtContent')}
		@cache {
			entryTags.1 = ${'Node_' + site.identifier}
		}
	}
}

root.robotsTxt {
	condition = ${request.format == 'txt.robots'}
	type = 'TYPO3.Neos.Seo:RobotsTxt'
}
